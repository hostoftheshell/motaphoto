{"version":3,"sources":["script.js"],"names":["document","addEventListener","menuButton","querySelector","menuContent","menuLinks","querySelectorAll","toggleMenu","classList","contains","add","remove","once","toggle","console","log","forEach","link","contactButton","contactOverlay","closeButton","toggleContactOverlay","event","target","setTimeout","parentElement","childNodes","node","nodeType","Node","TEXT_NODE","nodeValue","trim"],"mappings":"AACAA,SAAAC,iBAAA,mBAAA,KACA,IAAAC,EAAAF,SAAAG,cAAA,eAAA,EACAC,EAAAJ,SAAAG,cAAA,qBAAA,EACA,IAAAE,EAAAL,SAAAM,iBAAA,2CAAA,EAEA,SAAAC,IAEAH,EAAAI,UAAAC,SAAA,aAAA,GAKAL,EAAAI,UAAAE,IAAA,cAAA,EAEAN,EAAAH,iBAAA,eAAA,WACAG,EAAAI,UAAAG,OAAA,aAAA,EACAP,EAAAI,UAAAG,OAAA,cAAA,CAGA,EAAA,CAAAC,KAAA,CAAA,CAAA,CAAA,GAGAR,EAAAI,UAAAE,IAAA,aAAA,EAIAR,EAAAM,UAAAK,OAAA,aAAA,CACA,CAvBAC,QAAAC,IAAAV,CAAA,EA0BAH,EAAAD,iBAAA,QAAAM,CAAA,EAGAF,EAAAW,QAAA,SAAAC,GACAA,EAAAhB,iBAAA,QAAA,WAEAG,EAAAI,UAAAC,SAAA,aAAA,GACAF,EAAA,CAEA,CAAA,CACA,CAAA,CACA,CAAA,EAIAP,SAAAC,iBAAA,mBAAA,KACA,IAAAiB,EAAAlB,SAAAG,cAAA,cAAA,EACA,IAAAgB,EAAAnB,SAAAG,cAAA,kBAAA,EACA,IAAAiB,EAAApB,SAAAG,cAAA,YAAA,EAGA,SAAAkB,IACAF,EAAAX,UAAAC,SAAA,QAAA,GACAU,EAAAX,UAAAG,OAAA,QAAA,EACAQ,EAAAX,UAAAE,IAAA,SAAA,IAEAS,EAAAX,UAAAG,OAAA,SAAA,EACAQ,EAAAX,UAAAE,IAAA,UAAA,EAEAS,EAAAlB,iBAAA,eAAA,KACAkB,EAAAX,UAAAE,IAAA,QAAA,EACAS,EAAAX,UAAAG,OAAA,UAAA,CACA,EAAA,CAAAC,KAAA,CAAA,CAAA,CAAA,EAEA,CAGAM,EAAAjB,iBAAA,QAAAoB,CAAA,EACAD,EAAAnB,iBAAA,QAAAoB,CAAA,EAEAF,EAAAlB,iBAAA,QAAA,IACAqB,EAAAC,SAAAJ,GACAE,EAAA,CAEA,CAAA,EAEArB,SAAAC,iBAAA,gBAAA,WAEAuB,WAAAH,EAAA,GAAA,CACA,EAAA,CAAA,CAAA,CACA,CAAA,EAIArB,SAAAC,iBAAA,mBAAA,KACAD,SAAAM,iBAAA,kCAAA,EAEAU,QAAA,IACAS,EAAAC,WAAAV,QAAA,IACAW,EAAAC,WAAAC,KAAAC,WAAAH,EAAAI,UAAAC,KAAA,GACAL,EAAAhB,OAAA,CAEA,CAAA,CACA,CAAA,CACA,CAAA","file":"main.min.js","sourcesContent":["// Fonction d'animation pour l'ouverture du menu de navigation principale sur tablette et mobile\ndocument.addEventListener('DOMContentLoaded', () => {\n    const menuButton = document.querySelector('.menu__button'); // Sélectionne le bouton du menu\n    const menuContent = document.querySelector('#primary-navigation'); // Sélectionne le contenu du menu\n    const menuLinks = document.querySelectorAll('#primary-navigation .main-menu .menu-item'); // Sélectionne tous les liens du menu\n    console.log(menuLinks);\n    function toggleMenu() {\n        // Vérifie si le menu est actuellement ouvert\n        const isOpen = menuContent.classList.contains('menu-active');\n\n        if (isOpen) {\n            \n            // Ajoute la classe 'menu-closing' pour déclencher l'animation de fermeture\n            menuContent.classList.add('menu-closing');\n            // Retire 'menu-active' après la fin de l'animation\n            menuContent.addEventListener('animationend', function () {\n                menuContent.classList.remove('menu-active');\n                menuContent.classList.remove('menu-closing');\n\n                \n            }, { once: true });\n        } else {\n            // Ajoute 'menu-active' pour ouvrir le menu\n            menuContent.classList.add('menu-active');\n        }\n\n        // Bascule la classe 'menu-active' sur le bouton\n        menuButton.classList.toggle('menu-active');\n    }\n\n    // Attache l'événement de clic au bouton du menu\n    menuButton.addEventListener('click', toggleMenu);\n\n    // Attache l'événement de clic à chaque lien du menu pour fermer le menu lorsqu'un lien est cliqué\n    menuLinks.forEach(function (link) {\n        link.addEventListener('click', function () {\n            // Ferme le menu seulement s'il est actuellement ouvert\n            if (menuContent.classList.contains('menu-active')) {\n                toggleMenu();\n            }\n        });\n    });\n});\n\n\n// Fonction d'animation pour l'ouverture du formulaire de contact\ndocument.addEventListener('DOMContentLoaded', () => {\n    const contactButton = document.querySelector('.contact-btn');\n    const contactOverlay = document.querySelector('.contact-overlay');\n    const closeButton = document.querySelector('.close-btn');\n    \n    // Function to toggle the visibility of the contact overlay with animation\n    function toggleContactOverlay() {\n        if (contactOverlay.classList.contains('hidden')) {\n            contactOverlay.classList.remove('hidden');\n            contactOverlay.classList.add('fade-in');\n        } else {\n            contactOverlay.classList.remove('fade-in');\n            contactOverlay.classList.add('fade-out');\n            // Wait for the animation to finish before adding the 'hidden' class\n            contactOverlay.addEventListener('animationend', () => {\n                contactOverlay.classList.add('hidden');\n                contactOverlay.classList.remove('fade-out');\n            }, { once: true });\n        }\n    }\n\n    // Event listener for the contact button to open the overlay\n    contactButton.addEventListener('click', toggleContactOverlay);\n    closeButton.addEventListener('click', toggleContactOverlay );\n    // Optional: Close the overlay when clicking outside of it\n    contactOverlay.addEventListener('click', (event) => {\n        if (event.target === contactOverlay) {\n            toggleContactOverlay();\n        }\n    });\n     // Event listener for form submission using wpcf7 events\n    document.addEventListener('wpcf7mailsent', function () {\n        // Delay the closing of the overlay by 2 seconds (2000 milliseconds)\n        setTimeout(toggleContactOverlay, 1000); \n    }, false);\n});\n\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const parentElements = document.querySelectorAll('.contact-overlay__header-wrapper');\n\n    parentElements.forEach((parentElement) => {\n        parentElement.childNodes.forEach((node) => {\n            if (node.nodeType === Node.TEXT_NODE && !node.nodeValue.trim()) {\n                node.remove();\n            }\n        });\n    });\n});"]}